import jwt from 'jsonwebtoken';
import bcrypt from "bcrypt";
import ejs from "ejs";
import { readTemplateFile } from "../configs/template.conf";
import fs from "fs"
import path from "path"
import prisma from "../models/prisma";
import axios from 'axios';
import jwkToPem from "jwk-to-pem"

// [GET] /page-account
const getAccount = async (req, res) => {
  try{
    const idorStatus = await prisma.vulnSetting.findUnique({
      where: {
        name: "IDOR"
      }
    })
    const userId = req.user.id;
    const userInfo = await prisma.$queryRaw`
        SELECT "UserInfo"."firstName", "UserInfo"."lastName", "UserInfo"."email", "UserInfo"."bio", "Credential"."username"
        FROM public."Credential"
        JOIN public."UserInfo" ON "Credential"."userId" = ${userId} AND "UserInfo"."userId" = ${userId}`;
  
    if (!userInfo) {
      return res.send("No user");
    }
    const update = req.session.update
    delete req.session.update
    const errPw = req.session.err
    delete req.session.err
    return res.render('page-account', { userInfo: userInfo[0], userId, update: update, err: errPw, idorStt: idorStatus.status});
  } 
  catch(err){
    res.send('loi')
  }
}
// [POST] page-account
const setInfoAccount = async (req, res) => {
  try{
    const idorStatus = await prisma.vulnSetting.findUnique({
      where: {
        name: "IDOR"
      }
    })
    if(idorStatus.status === "No"){
      const userId = parseInt(req.user.id);
      const { firstname, lastname, email, bio} = req.body;
      await prisma.userInfo.update({
        where: { userId: userId },
        data: { firstName: firstname, lastName: lastname, email: email, bio: bio }
      });
    }
    else {
      const { firstname, lastname, email, bio, id} = req.body;
      let idd = parseInt(id)
      await prisma.userInfo.update({
        where: { userId: idd },
        data: { firstName: firstname, lastName: lastname, email: email, bio: bio }
      });
    }
    const sstiStatus = await prisma.vulnSetting.findUnique({
      where: { name: "SSTI" }
    });
    if (sstiStatus.status === "Yes") {
      const userInfo = await prisma.userInfo.findUnique({
        where: {
          id: req.user.id
        }
      })
      const firstname = userInfo.firstName
      const lastname = userInfo.lastName
      const bio = userInfo.bio
      try {
        const templateData = readTemplateFile(); 
        let accountProfile = templateData.replace("<%= userInfo.firstName %>",firstname).replace("<%= userInfo.lastName %>", lastname)
        const renderProfile = ejs.render(accountProfile, { userInfo: userInfo, idorStt: idorStatus.status, update: { message: "Updated Successfully!" } });
        return res.send(renderProfile);
      } catch (error) {
        console.log(error)
        return res.status(500).send(error);
      }
    } else {
      req.session.update = {message: "Updated Successfully!"};
      return res.redirect('/page-account');
    }
  }
  catch(err){
    console.log('loi')
    return res.status(500).send('error!')
  }
};

// [POST] page-account/password
const setPassword = async (req, res) => {
  const token = req.cookies.jwt;
  try{
    const brokenAuthenStatus = await prisma.vulnSetting.findUnique({
      where: {
        name: "Broken Authentication"
      }
    })
    let user
    const {username, password, newpassword, cpassword} = req.body;
    const result = jwt.decode(token, process.env.JWT_SECRET)
    const userId = result.id;
    if(brokenAuthenStatus.status === "Block Account") {
      user = await prisma.credential.findUnique({
        where:{
          username: username
        }
      });
    }
    else {
      
      user = await prisma.credential.findUnique({
        where:{
          id: userId
        }
      });
    }
    const isMatch = await bcrypt.compare(password, user.password);
    if(!isMatch) {
      req.session.err = {message: "Wrong Password!"}
      return res.redirect('/page-account');
    }
    else if(newpassword !== cpassword) {
      req.session.err = {message: "New password doesn't match confirm password!"}
      return res.redirect('/page-account');
    }
    else{
      const hashedPassword = await bcrypt.hash(newpassword, 10);
      await prisma.credential.update({
        where: {userId: userId},
        data: {password: hashedPassword}
      });
      req.session.update = {message: "Updated Successfully!"}
      return res.redirect('/page-account');
    }
  }
  catch(err){
    return res.status(500).send(err)
  }
}

export default { getAccount, setInfoAccount, setPassword };