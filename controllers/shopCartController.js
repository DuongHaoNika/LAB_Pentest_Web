import libxmljs from "libxmljs"
import xml2js from "xml2js"
import prisma from "../models/prisma";
import shopCartService from "../services/shopCartService";

// [GET] shop-cart
const getShopCart = async (req, res) => {
  try{
    const cart = await shopCartService.getCart(req.user.id)
    let quantities = []
    let products = []

    for(let i = 0; i < cart.length; i++) {
      const product = await prisma.product.findFirst({
        where: {
          id: cart[i].product_id
        }
      })
      products.push(product)
      quantities.push(await shopCartService.getQuantity(req.user.id, product.id))
    }
    return res.render("shop-cart", {products, quantities});
  }
  catch(err) {
    res.send(err)
  }
};

const deleteAllShopCart = async (req, res) => {
  try {
    await shopCartService.clearAllCart()
    return res.redirect('/shop-cart')
  }
  catch(err) {
    res.send("error!")
  }
}

const deleteCart = async (req, res) => {
  try{
    const product_id = req.params.id
    await shopCartService.deleteCart(req.user.id, product_id)
    return res.redirect('/shop-cart')
  }
  catch(err) {
    res.send(err)
  }
}

// [POST] shop-cart
const addCart = async (req, res) => {
  try {
    let xmlDoc
    const xxeStatus = await prisma.vulnSetting.findUnique({
      where: {
        name: "XXE"
      }
    })
    if(xxeStatus.status == "No") {
      // const blacklists = ['<!ENTITY', '<!DOCTYPE', '%', '&', ';', 'SYSTEM']
      // for(let i = 0; i < blacklists.length; i++) {
      //   if(req.body.includes(blacklists[i])) {
      //     console.log('Blacklist!')
      //     return res.json({ message: 'Error input!', redirectUrl: '/shop-cart' })
      //   }
      // }

      const result = await xml2js.parseStringPromise(req.body, {explicitArray: false, trim: true, preserveWhitespace: true})
      const productId = result.product.productId;
      const quantity = result.product.quantity;
      await shopCartService.addCart(req.user.id, productId, quantity)
      const data = {
        message: "success",
        productId: productId,  
        quantity: quantity,                
        redirectUrl: '/shop-cart'      
      };
      return res.json(data);
    }
    else {
      xmlDoc = libxmljs.parseXml(req.body, { replaceEntities: true, preserveWhitespace: true })
      const productIdNode = xmlDoc.get('//productId')
      const quantityNode = xmlDoc.get('//quantity')
      const productId = productIdNode ? productIdNode.text() : undefined
      const quantity = quantityNode ? quantityNode.text() : undefined
      console.log(quantity)
      await shopCartService.addCart(req.user.id, productId, quantity)
      const data = {
        message: "success",
        productId: productId,  
        quantity: quantity,                
        redirectUrl: '/shop-cart'      
      };
      return res.json(data);
    }
  } catch (error) {
    console.error("Error parsing XML:", error)
    return res.json({ message: error, redirectUrl: '/shop-cart' })
  }
}

export default { getShopCart, addCart, deleteAllShopCart, deleteCart};
