
import prisma from "../models/prisma";
import fs from 'fs'
import path, { normalize } from "path"

// [GET] /upload/
const getImage = async (req, res) => {
    try{
        const fileUL = await prisma.vulnSetting.findUnique({
            where: {
                name: "Path Traversal"
            }
        })
        const baseDir = "/var/www/html/upload/"
        if(fileUL.status == "No") {
            const pathUrl = baseDir + req.query.image
            const filePath = path.normalize(pathUrl)
            console.log(filePath)
            if(!filePath.startsWith(baseDir)) {
                return res.status(400).send("Must start with ../upload/")
            }
            if (!fs.existsSync(filePath)) {
                return res.status(404).send('File not found');
            }
            const data = fs.readFileSync(filePath, 'utf8');
            return res.send(data)
        }
        else if(fileUL.status == "Easy") {
            let filePath = baseDir + req.query.image
            filePath = filePath.replaceAll("../", "")
            console.log(filePath)
            if (!fs.existsSync(filePath)) {
                return res.status(404).send('File not found');
            }
            const data = fs.readFileSync(filePath, 'utf8');
            return res.send(data)
        }
        else {
            let filePath = baseDir + req.query.image
            filePath = path.normalize(filePath)
            filePath = decodeURIComponent(filePath)
            console.log(filePath)
            if(!filePath.startsWith(baseDir)) {
                return res.status(400).send("Must start with ../upload/")
            }
            if (!fs.existsSync(filePath)) {
                return res.status(404).send('File not found');
            }
            const data = fs.readFileSync(filePath, 'utf8');
            return res.send(data)
        }
    }
    catch(err){
        return res.send(err)
    }
}

export default {getImage}