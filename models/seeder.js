const { PrismaClient } = require("@prisma/client");
const bcrypt = require("bcrypt");
const { faker } = require("@faker-js/faker");

const prisma = new PrismaClient();

async function seedUsers() {
  const users = [];
  const numUsers = 50;

  for (let i = 0; i < numUsers; i++) {
    const passwordSalt = await bcrypt.genSalt();
    const passwordHash = await bcrypt.hash(
      faker.internet.password(),
      passwordSalt
    );
    const user = await prisma.user.create({
      data: {
        isAdmin: false,
        credentials: {
          create: {
            username: faker.internet.userName(),
            hasher: "bcrypt",
            passwordHash: passwordHash,
            passwordSalt: passwordSalt,
          },
        },
        userInfo: {
          create: {
            firstName: faker.person.firstName(),
            lastName: faker.person.lastName(),
            email: faker.internet.email(),
            phone: faker.phone.number(),
            avatarLink: faker.image.avatar(),
            emailValidated: faker.datatype.boolean(
              faker.number.int({ min: 0, max: 1 })
            ),
            phoneValidated: faker.datatype.boolean(
              faker.number.int({ min: 0, max: 1 })
            ),
            bio: faker.lorem.paragraph(),
          },
        },
        socialProfiles: {
          create: {
            platform: faker.helpers.arrayElement([
              "facebook",
              "twitter",
              "instagram",
            ]),
            platformUrl: faker.internet.url(),
          },
        },
        vendors: {
          create: {
            slug: faker.helpers.slugify(faker.company.name()),
            name: faker.company.name(),
            vendorBio: faker.lorem.paragraph(),
            avatarUrl: faker.image.avatar(),
          },
        },
      },
    });
    users.push(user);
  }

  console.log(`Seeded ${users.length} users`);
}

async function seedCategories() {
  const categories = [];
  const numCategories = 10;

  for (let i = 0; i < numCategories; i++) {
    const category = await prisma.category.create({
      data: {
        slug: faker.helpers.slugify(faker.commerce.department()),
        name: faker.commerce.productAdjective(),
        description: faker.commerce.productMaterial(),
      },
    });
    categories.push(category);
  }

  console.log(`Seeded ${categories.length} categories`);
}

async function seedProducts() {
  const products = [];
  const numProducts = 100;
  const categories = await prisma.category.findMany();
  const vendors = await prisma.vendor.findMany();

  for (let i = 0; i < numProducts; i++) {
    const price = parseFloat(faker.commerce.price());
    const title = faker.commerce.productName();
    const product = await prisma.product.create({
      data: {
        categoryId: faker.helpers.arrayElement(categories).id,
        vendorId: faker.helpers.arrayElement(vendors).id,
        title,
        picture: faker.image.url(),
        summary: faker.lorem.sentence(),
        description: faker.lorem.paragraph(),
        slug: faker.helpers.slugify(title + "-" + faker.string.uuid()),
        price,
        discountType: faker.helpers.arrayElement(["percentage", "fixed"]),
        discountValue: faker.number.int({ min: 10, max: 50 }),
      },
    });
    products.push(product);
  }
  console.log(`Seeded ${products.length} products`);
}

async function seed() {
  // clear all tables
  await prisma.$executeRaw`TRUNCATE TABLE public."User", public."Category", public."Product", public."SocialProfile", public."Cart", public."Review", public."Vendor", public."AdminRole" RESTART IDENTITY CASCADE`;
  // await prisma.$executeRaw`REINDEX DATABASE public`;
  await seedUsers();
  await seedCategories();
  await seedProducts();
}

seed()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
