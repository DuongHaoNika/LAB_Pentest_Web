// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  isAdmin        Boolean
  credentials    Credential?
  userInfo       UserInfo?
  cart           Cart?
  orders         Order[]
  socialProfiles SocialProfile[]
  reviews        Review[]
  vendors        Vendor[]
  adminRoles     AdminRole[]
}

model Credential {
  id           Int    @id @default(autoincrement())
  userId       Int    @unique
  user         User   @relation(fields: [userId], references: [id])
  username     String @unique
  email        String
  password     String
}

model UserInfo {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  user           User      @relation(fields: [userId], references: [id])
  firstName      String?
  lastName       String?
  email          String    @unique
  phone          String?
  avatarLink     String?
  emailValidated Boolean?
  phoneValidated Boolean?
  bio            String?
  createdBy      Int?
  updatedBy      Int?
}

model SocialProfile {
  id          Int    @id @default(autoincrement())
  userId      Int
  user        User   @relation(fields: [userId], references: [id])
  platform    String
  platformUrl String
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model Order {
  id                         Int           @id @default(autoincrement())
  userId                     Int
  user                       User          @relation(fields: [userId], references: [id])
  voucherId                  Int?
  voucher                    Voucher?      @relation(fields: [voucherId], references: [id])
  orderStatus                String
  orderApprovedAt            DateTime?
  orderDeliveredCarrierDate  DateTime?
  orderDeliveredCustomerDate DateTime?
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
  createdBy                  Int?
  updatedBy                  Int?
  orderDetails               OrderDetail[]
}

model OrderDetail {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  price     Float
  quantity  Int
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cartId     Int
  cart       Cart     @relation(fields: [cartId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  price      Int
  shippingId Int
  shipping   Shipping @relation(fields: [shippingId], references: [id])
  createdAt  DateTime @default(now())
}

model Product {
  id               Int               @id @default(autoincrement())
  categoryId       Int
  category         Category          @relation(fields: [categoryId], references: [id])
  vendorId         Int
  vendor           Vendor            @relation(fields: [vendorId], references: [id])
  title            String
  picture          String
  summary          String
  description      String
  slug             String            @unique
  price            Float
  discountType     String?
  discountValue    Float?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  cartItems        CartItem[]
  orderDetails     OrderDetail[]
  reviews          Review[]
  productVouchers  ProductVoucher[]
  productShippings ProductShipping[]
  productTags      ProductTag[]
}

model Category {
  id          Int       @id @default(autoincrement())
  slug        String
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Vendor {
  id            Int            @id @default(autoincrement())
  ownedId       Int            @unique
  owner         User           @relation(fields: [ownedId], references: [id])
  name          String
  slug          String
  vendorBio     String
  avatarUrl     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdBy     Int?
  updatedBy     Int?
  products      Product[]
  vendorSocials VendorSocial[]
}

model VendorSocial {
  id       Int    @id @default(autoincrement())
  vendorId Int
  vendor   Vendor @relation(fields: [vendorId], references: [id])
  platform String
  url      String
}

model ProductVoucher {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  voucherId Int
  voucher   Voucher @relation(fields: [voucherId], references: [id])
}

model Voucher {
  id                 Int              @id @default(autoincrement())
  code               String
  voucherDescription String
  discountValue      Int
  discountType       String
  timesUsed          Int              @default(0)
  maxUsage           Int
  voucherStartDate   DateTime
  voucherEndDate     DateTime
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  createdBy          Int?
  updatedBy          Int?
  orders             Order[]
  productVouchers    ProductVoucher[]
}

model Shipping {
  id               Int               @id @default(autoincrement())
  name             String
  active           Boolean
  iconPath         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdBy        Int?
  updatedBy        Int?
  cartItems        CartItem[]
  productShippings ProductShipping[]
}

model ProductShipping {
  id             Int      @id @default(autoincrement())
  productId      Int
  product        Product  @relation(fields: [productId], references: [id])
  shippingId     Int
  shipping       Shipping @relation(fields: [shippingId], references: [id])
  shippingCharge Int
  free           Boolean
  estimattedDays Int
}

model ProductTag {
  id        Int     @id @default(autoincrement())
  tagId     Int
  tag       Tag     @relation(fields: [tagId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Tag {
  id          Int          @id @default(autoincrement())
  tagName     String
  iconPath    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   String
  updatedBy   String
  productTags ProductTag[]
}

model AdminRole {
  adminId Int
  admin   User @relation(fields: [adminId], references: [id])
  roleId  Int
  role    Role @relation(fields: [roleId], references: [id])

  @@id([adminId, roleId])
}

model Role {
  id         Int         @id @default(autoincrement())
  roleName   String
  privileges String[]
  adminRoles AdminRole[]
}

model Slideshow {
  id        Int      @id @default(autoincrement())
  hrefUrl   String
  imageUrl  String
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VulnSetting {
  id Int @id @default(autoincrement())
  name String
  status Boolean @default(false)
}